CREATE OR REPLACE PROCEDURE SELEZIONA_MENU( PK CLIENTE.N_TEL%TYPE,ID_MENU NUMBER , QUANTITA NUMBER )
IS
ERRORE_1 EXCEPTION;
ID_PREN PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
ID_ORDINE  ORDINE.N_ORDINE%TYPE;
CONTATORE NUMBER (3,0);
BEGIN
 SELECT COUNT(N_ORDINE) INTO CONTATORE FROM ORDINE JOIN PRENOTAZIONE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE ID_CL=PK;

IF (CONTATORE = 0 ) THEN
RAISE ERRORE_1;

ELSE
SELECT  MAX(N_ORDINE) INTO ID_ORDINE FROM ORDINE JOIN PRENOTAZIONE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE ID_CL=PK;
INSERT INTO SELEZIONA VALUES (QUANTITA,ID_ORDINE,ID_MENU);
COMMIT;
DBMS_OUTPUT.PUT_LINE('OPERAZIONE ESEGUITA CON SUCCESSO');
END IF;



EXCEPTION
WHEN ERRORE_1 THEN
RAISE_APPLICATION_ERROR(-20020,'L utente selezionato non risulta essere prenotato');



END;
/


CREATE OR REPLACE PROCEDURE PREN(PK CLIENTE.N_TEL%TYPE, N_PERS PRENOTAZIONE.N_PERSONE%TYPE, DATA_PRENOTAZIONE DATE,ID_RIST PRENOTAZIONE.ID_RISTORANTE%TYPE, FLAG NUMBER)
IS
CONTATORE NUMBER(2,0);
CONTATORE2 NUMBER(2,0);
ID_PR      PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
DATA_CHIAM DATE;
FLAG_ERRATO EXCEPTION;
NUOVO_ORDINE ORDINE.N_ORDINE%TYPE;
RIST_ERRATO EXCEPTION;

BEGIN
-- CONTROLLO SE L'UTENTE EFFETTIVAMENTE ESISTE 
SELECT COUNT(N_TEL) INTO CONTATORE FROM CLIENTE WHERE N_TEL=PK; 
IF (CONTATORE=0) THEN
RAISE NO_DATA_FOUND;
END IF;

--CONTROLLO SE LA PARTITA IVA ESISTE

SELECT COUNT(P_IVA) INTO CONTATORE2 FROM RISTORANTE WHERE P_IVA=ID_RIST; 
IF (CONTATORE2=0) THEN
RAISE RIST_ERRATO;
END IF;



SELECT SYSDATE INTO DATA_CHIAM FROM DUAL;
--GENERO UN NUOVO ID_PRENOTAZIONE;
SELECT  MAX(ID_PRENOTAZIONE+1) INTO ID_PR FROM PRENOTAZIONE;

INSERT INTO PRENOTAZIONE VALUES(ID_PR,N_PERS,PK,DATA_CHIAM,ID_RIST,DATA_PRENOTAZIONE);

-- CONTROLLO PER VERIFCARE CHE IL VALORE DEL FLAG SIA AMMESSO, PER DETERMINARE
--SE L'UTENTE STA EFFETTUANDO UNA PRENOTAZIONE PER CASA O IN SALA
IF (FLAG > 1 AND FLAG < 0) THEN
RAISE FLAG_ERRATO;
ELSIF (FLAG=1) THEN 
COMMIT;
DBMS_OUTPUT.PUT_LINE('PRENOTAZIONE EFFETTUATA CON SUCCESSO CON ID:' || ID_PR ); 
DBMS_OUTPUT.PUT_LINE('LA ASPETTIAMO IL GIORNO ' || TO_CHAR(DATA_PRENOTAZIONE, 'DD-MON-YYYY HH24:MI ') );
ELSE

SELECT MAX(N_ORDINE+1) INTO NUOVO_ORDINE FROM ORDINE; 

INSERT INTO ORDINE VALUES (NUOVO_ORDINE,ID_PR);
INSERT INTO ORDINE_CASA VALUES (NUOVO_ORDINE);
COMMIT;
DBMS_OUTPUT.PUT_LINE('PRENOTAZIONE EFFETTUATA CON SUCCESSO, RICHIAMARE LA PROCEDURA SELEZIONA_MENU');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20021,'L utente non risulta essere registrato. Eseguire la registrazione');

WHEN FLAG_ERRATO THEN
RAISE_APPLICATION_ERROR(-20022,'FLAG AMMESI : 1 PER PRONOTARE IN SALA, 0 PER PRENOTARE D ASPORTO ');

WHEN RIST_ERRATO THEN
RAISE_APPLICATION_ERROR(-20023,'Il ristorante selezionato non esiste ');

END;
/



CREATE OR REPLACE PROCEDURE DISDETTA(PK CLIENTE.N_TEL%TYPE, DATA_PREN DATE) 
IS
ORDINE_DA_CASA EXCEPTION;
CONTATORE NUMBER(2,0);
ID_ORDINE NUMBER(2,0);
ID_PR PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
BEGIN

SELECT ID_PRENOTAZIONE INTO ID_PR FROM PRENOTAZIONE WHERE ID_CL=PK AND TRUNC(DATA_P)=TRUNC(DATA_PREN);



SELECT COUNT(ORDINE_CASA.N_ORDINE) INTO CONTATORE FROM ORDINE_CASA JOIN ORDINE ON ORDINE_CASA.N_ORDINE=ORDINE.N_ORDINE WHERE ORDINE.ID_PRENOTAZIONE=ID_PR;

IF (CONTATORE > 0) THEN
RAISE ORDINE_DA_CASA;
ELSE

DELETE FROM PRENOTAZIONE WHERE ID_CL=PK AND ID_PRENOTAZIONE=ID_PR;
COMMIT;
DBMS_OUTPUT.PUT_LINE('DISDETTA EFFETTUATA CON SUCCESSO ');

END IF;


EXCEPTION
WHEN ORDINE_DA_CASA THEN
RAISE_APPLICATION_ERROR(-20025,'Impossibile disdire questo tipo di ordine.');


WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20026,'Impossibile disdire questo ordine. Prenotazione inesistente');
END;
/




CREATE OR REPLACE PROCEDURE ASSEGNA_TAVOLO(PK CLIENTE.N_TEL%TYPE, ID_PR PRENOTAZIONE.ID_PRENOTAZIONE%TYPE)
IS
TROPPO_TARDI EXCEPTION;
TROPPO_PRESTO EXCEPTION;
CONTATORE NUMBER(2,0);
DATA_PRESENZA DATE;
DIFFERENZA NUMBER(6,0);
numero_persone number(2,0);
NUMERO_TAVOLO NUMBER (2,0);
N_ORDINE_NUOVO ORDINE.N_ORDINE%TYPE;
CAPIENZA_TAVOLO TAVOLO.CAPIENZA%TYPE;
DATA_PREN DATE;
RIST RISTORANTE.P_IVA%TYPE;
CHECK_PR PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
VARIABILE NUMBER(3,0);
BEGIN
--CI SERVE SOLO PER VEDERE SE LA QUERY RITORNA UN  NO_DATA_FOUND O MENO
SELECT ID_PRENOTAZIONE INTO CHECK_PR FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR ;

SELECT DATA_P INTO DATA_PREN FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;
--Orario in cui arriva il cliente 
SELECT SYSDATE INTO DATA_PRESENZA FROM DUAL;


--CONTROLLO SE ARRIVA IN RITARDO 
SELECT  24*60* (DATA_PREN-DATA_PRESENZA) INTO DIFFERENZA from dual;
IF (DIFFERENZA < 30  ) THEN
DELETE FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;
COMMIT;
RAISE TROPPO_TARDI;
ELSIF (DIFFERENZA > 30 ) THEN
RAISE TROPPO_PRESTO;

ELSE




--Assegnazione del tavolo
--TROVO IL NUMERO DI PERSONE
SELECT N_PERSONE INTO NUMERO_PERSONE FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;


--TROVO UN TAVOLO CON UNA CAPIENZA SUPERIORI AL NUMERO DI PERSONE.
SELECT MIN(CAPIENZA)  INTO CAPIENZA_TAVOLO FROM TAVOLO WHERE CAPIENZA >=NUMERO_PERSONE AND ID_RISTORANTE=(SELECT ID_RISTORANTE  FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR);


--PER RIPRENDERE L'ID RISTORANTE
SELECT ID_RISTORANTE INTO RIST FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;



SELECT MIN(N_TAVOLO) INTO NUMERO_TAVOLO FROM TAVOLO WHERE CAPIENZA=CAPIENZA_TAVOLO;

SELECT COUNT(N_ORDINE) INTO VARIABILE FROM ORDINE;
IF ( VARIABILE > 0) THEN
SELECT MAX(N_ORDINE+1) INTO N_ORDINE_NUOVO FROM ORDINE;
ELSE
N_ORDINE_NUOVO:=1;
END IF;


INSERT INTO ORDINE VALUES(N_ORDINE_NUOVO,ID_PR);
INSERT INTO ORDINE_SALA VALUES(N_ORDINE_NUOVO,NUMERO_TAVOLO,RIST);
COMMIT;
DBMS_OUTPUT.PUT_LINE('TAVOLO ASSEGNATO CON SUCCESSO');

END IF;
EXCEPTION
WHEN  NO_DATA_FOUND THEN 
RAISE_APPLICATION_ERROR(-20027,'La prenotazione non esiste');
WHEN TROPPO_TARDI THEN
RAISE_APPLICATION_ERROR(-20028,'Prenotazione disdetta: utente arrivato troppo tardi');
WHEN TROPPO_PRESTO THEN
RAISE_APPLICATION_ERROR(-20029,' utente arrivato troppo presto');
END;
/


CREATE OR REPLACE PROCEDURE GET_CONTO(N_ORD ORDINE.N_ORDINE%TYPE)
IS
CONTO_INESISTENTE EXCEPTION;
ID_CLI VARCHAR2(11);
CONTROLLO_ERRORE NUMBER(2,0);
QUANTITA_SELEZIONA NUMBER (3,0);
I NUMBER (1,0);
CONTATORE NUMBER(3,0);
PREZZO_PARZIALE number (4,0);
PREZZO_TOTALE number (4,0);
PK_CONTO VARCHAR2(8);
CONTA NUMBER(3,0);
CONTA2 NUMBER(3,0);
CC  VARCHAR2(16);
BEGIN

SELECT COUNT(N_ORDINE) INTO CONTROLLO_ERRORE FROM ORDINE WHERE N_ORDINE=N_ORD;

IF (CONTROLLO_ERRORE = 0 )THEN
RAISE CONTO_INESISTENTE;
END IF;

PREZZO_TOTALE:=0;
FOR I IN 1..5
LOOP
SELECT COUNT(ID_MENU) INTO CONTATORE FROM SELEZIONA WHERE N_ORDINE=N_ORD AND ID_MENU=I;






IF (CONTATORE > 0) THEN
--PRENDO LA QUANTITA DELL I-ESIMO MENU SELEZIONATO
SELECT QUANTITA INTO QUANTITA_SELEZIONA FROM SELEZIONA WHERE N_ORDINE=N_ORD AND ID_MENU=I;
--QUERY PER CALCOLARE IL PREZZO DEL MENU I 
--SI PRENDE TUTTI I PREZZI DEI PASTI CHE COMPONGONO  L 'I-ESIMO MENU E LI SOMMA
select sum(prezzo) into PREZZO_PARZIALE from contiene join pasto on pasto.nome_pasto=contiene.nome_pasto where id_menu=I;

PREZZO_TOTALE:=PREZZO_TOTALE+(PREZZO_PARZIALE*QUANTITA_SELEZIONA);


END IF;
END LOOP;

DBMS_OUTPUT.PUT_LINE('Totale conto selezionato = ' || PREZZO_TOTALE);

--VEDO SE DEVO CREARE A MANO IL CODICE DI PARTENZA 
SELECT COUNT(CODICE) INTO CONTA FROM CONTO;

IF (CONTA = 0) THEN
PK_CONTO:='0001';
ELSE
SELECT MAX(CODICE)+1 INTO PK_CONTO FROM CONTO;
END IF;

-- CONTROLLIAMO SE DOBBIAMO FARE UN UPDATE(NEL CASO IN CUI CI FOSSE UN ERRORE UMANO NELL'INSERIMENTO) O UN INSERT
SELECT COUNT(ID_ORDINE) INTO CONTA2 FROM CONTO WHERE ID_ORDINE=N_ORD;


--E' UN UPDATE
IF (CONTA2 >0 ) THEN
UPDATE CONTO SET TOTALE=PREZZO_TOTALE WHERE ID_ORDINE=N_ORD;
COMMIT;
DBMS_OUTPUT.PUT_LINE('UPDATE EFFETTUATO CON SUCCESSO');
ELSE

-- RISALGO A PARTIRE DA N_ORDINE ALLA PK DEL MIO CLIENTE PER TROVARE UNA CARTA DI CREDITO PER PAGARE IL CONTO
SELECT ID_CL  INTO ID_CLI FROM PRENOTAZIONE JOIN ORDINE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE N_ORDINE=N_ORD;


--PRENDO UNA CC CORRETTA 
select n_card  INTO CC from carta_di_credito where id_cliente=ID_CLI AND ROWNUM=1;

INSERT INTO CONTO VALUES (PK_CONTO,N_ORD,CC,PREZZO_TOTALE);
COMMIT;
END IF;

DBMS_OUTPUT.PUT_LINE('Pagamento andato a buon fine');
EXCEPTION
WHEN CONTO_INESISTENTE THEN
RAISE_APPLICATION_ERROR(-20030,'L ordine non esiste.');
END;
/




CREATE OR REPLACE PROCEDURE GET_FATTURATO(RIST RISTORANTE.P_IVA%TYPE)
IS
FATTURATO NUMBER(6,0);




BEGIN


SELECT SUM(TOTALE) into FATTURATO FROM CONTO JOIN (SELECT * FROM PRENOTAZIONE JOIN ORDINE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE ID_RISTORANTE=RIST) ON N_ORDINE=ID_ORDINE;

DBMS_OUTPUT.PUT_LINE('Fatturato= '|| FATTURATO || ' EURO');
COMMIT;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20050,' RISTORANTE INESISTENTE');

END;
/