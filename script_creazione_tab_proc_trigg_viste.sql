DELETE FROM PROVIENE_DA  ; 
DELETE FROM  FORNITURA; 
DELETE FROM   FORNITORE;
DELETE FROM SI_COMPONE;
DELETE FROM   INGREDIENTE;
DELETE FROM  CONTIENE;
DELETE FROM  PASTO;
DELETE FROM   SELEZIONA;
DELETE FROM   MENU; 
DELETE FROM  CONTO;
DELETE FROM   CARTA_DI_CREDITO; 
DELETE FROM    CONSEGNA;
DELETE FROM   ORDINE_CASA;
DELETE FROM ORDINE_SALA; 
DELETE FROM   ORDINE;
DELETE FROM   TAVOLO;
DELETE FROM   JOURNEY;
DELETE FROM  LAVORA;
DELETE FROM   STAFF;
DELETE FROM  PRENOTAZIONE;
DELETE FROM   RISTORANTE;
DELETE FROM   CLIENTE; 
DROP TABLE PROVIENE_DA;
DROP TABLE FORNITURA;
DROP TABLE FORNITORE;
DROP TABLE SI_COMPONE;
DROP TABLE INGREDIENTE;
DROP TABLE CONTIENE;
DROP TABLE PASTO;
DROP TABLE SELEZIONA;
DROP TABLE MENU;
DROP TABLE CONTO;
DROP TABLE CARTA_DI_CREDITO;
DROP TABLE CONSEGNA;
DROP TABLE ORDINE_CASA;
DROP TABLE ORDINE_SALA;
DROP TABLE ORDINE;
DROP TABLE TAVOLO;
DROP TABLE JOURNEY;
DROP TABLE LAVORA;
DROP TABLE STAFF;
DROP TABLE PRENOTAZIONE;
DROP TABLE RISTORANTE;
DROP TABLE CLIENTE;



 CREATE TABLE CLIENTE (
    NOME VARCHAR(30) NOT NULL,
    COGNOME VARCHAR(30) NOT NULL,
    N_TEL VARCHAR(11) PRIMARY KEY,
    VIA VARCHAR(50) NOT NULL,
    CIVICO NUMBER(5,0) NOT NULL,
    E_MAIL VARCHAR(60) NOT NULL,
    CAP VARCHAR(6) NOT NULL,
    CONSTRAINT EMAILCHECK CHECK( REGEXP_LIKE (E_MAIL,'^[A-Za-z]+[A-Za-z0-9._-]+@[A-Za-z0-9.-]' )    ),
   CONSTRAINT telefonocheck CHECK( REGEXP_LIKE (N_TEL ,'^[0-9]{3}+$') ) );

CREATE TABLE RISTORANTE (
    P_IVA VARCHAR(20) PRIMARY KEY,
    NOME_R VARCHAR(20) NOT NULL,
    VIA VARCHAR(50) NOT NULL,
    CAP VARCHAR(6) NOT NULL,
    CITTA VARCHAR(15)NOT NULL,
    CIVICO NUMBER (5,0) NOT NULL,
    DAY_OFF CHAR(1) NOT NULL,
    CONSTRAINT CHECK_IVA CHECK (REGEXP_LIKE(P_IVA, '^[A-Z]{2}+[A-Z0-9]{9}' ) ) 
    CONSTRAINT CHECK_GIORNO_FESTA CHECK (DAY_OFF >=1 AND DAY_OFF <=3);
) ;

CREATE TABLE PRENOTAZIONE (
    ID_PRENOTAZIONE NUMBER(3,0) PRIMARY KEY,
    N_PERSONE NUMBER(2,0) NOT NULL,
    ID_CL VARCHAR(11) NOT NULL,
    DATA_CHIAMATA DATE,
    ID_RISTORANTE VARCHAR(20) NOT NULL,
    DATA_P DATE,
    CONSTRAINT FK1 FOREIGN KEY(ID_CL) REFERENCES  CLIENTE (N_TEL) ON DELETE CASCADE,
    CONSTRAINT FK2 FOREIGN KEY (ID_RISTORANTE) REFERENCES RISTORANTE(P_IVA) ON DELETE
    CASCADE,
   CONSTRAINT CHECK_DATA CHECK (DATA_P > DATA_CHIAMATA),
   CONSTRAINT CHECK_PRENOT CHECK (TO_CHAR(DATA_P,'HH24')BETWEEN 12 AND 23 ), 
   CONSTRAINT CHECK_NUMERO_PERSONE CHECK(N_PERSONE <= 15) );


CREATE TABLE STAFF(
    N_CARTELLINO NUMBER(2,0)PRIMARY KEY,
    NOME_S VARCHAR(10) NOT NULL,
    COGONOME_S VARCHAR(20) NOT NULL,
    N_TELEFONO VARCHAR(11),
    SALARIO NUMBER(4,0),
    RUOLO VARCHAR(15) NOT NULL,
    CONSTRAINT TELEFONO_STAF_CHECK CHECK (REGEXP_LIKE ( N_TELEFONO, '^[0-9]{3}+$') ),
    CONSTRAINT CHECK_RUOLO CHECK (REGEXP_LIKE (RUOLO,'FATTORINO|CASSIERE|INSERVIENTE|LAVAPIATTI|CHEF|CAMERIERE') ),
   CONSTRAINT CHECK_SALARIO CHECK(SALARIO>850) );


CREATE TABLE LAVORA(
    D_INIZIO_TURNO DATE,
    D_FINE_TURNO DATE,
    ID_RIST VARCHAR(20) NOT NULL,
    ID_STAFF NUMBER(2) NOT NULL,
    CONSTRAINT FK3 FOREIGN KEY (ID_RIST)REFERENCES RISTORANTE (P_IVA) ON DELETE CASCADE,
    CONSTRAINT FK4 FOREIGN KEY (ID_STAFF)REFERENCES STAFF (N_CARTELLINO) ON DELETE CASCADE ) ;



CREATE TABLE JOURNEY (
    KM_PERCORSI NUMBER (3,0),
    TIPO_VEICOLO VARCHAR(10),
    N_ORDINI_CONSEGNATI NUMBER(2,0),
    D_PARTENZA DATE NOT NULL,
    D_RITORNO DATE ,
    ID_JOURNEY NUMBER(3,0),
    ID_STAFF NUMBER (2,0),
   CONSTRAINT FK5 PRIMARY KEY(ID_JOURNEY,ID_STAFF),
   CONSTRAINT FK6 FOREIGN KEY (ID_STAFF) REFERENCES STAFF(N_CARTELLINO) ON DELETE CASCADE,
   CONSTRAINT D_CHECK CHECK (D_RITORNO > D_PARTENZA  ) );


 CREATE TABLE ORDINE (
    N_ORDINE NUMBER (3,0) PRIMARY KEY,
    ID_PRENOTAZIONE NUMBER(3,0) NOT NULL UNIQUE,
    CONSTRAINT FK7 FOREIGN KEY (ID_PRENOTAZIONE) REFERENCES PRENOTAZIONE (ID_PRENOTAZIONE) ON DELETE CASCADE );

CREATE TABLE ORDINE_CASA (
    N_ORDINE NUMBER (3,0) PRIMARY KEY,
    CONSTRAINT FK8 FOREIGN KEY (N_ORDINE) REFERENCES ORDINE (N_ORDINE) ON DELETE CASCADE );

CREATE TABLE TAVOLO (
    N_TAVOLO NUMBER (2,0),
    CAPIENZA NUMBER (2,0) NOT NULL,
    ID_RISTORANTE VARCHAR(20),
    CONSTRAINT FK11 PRIMARY KEY (N_TAVOLO,ID_RISTORANTE),
    CONSTRAINT FK12 FOREIGN KEY (ID_RISTORANTE) REFERENCES RISTORANTE (P_IVA) ON DELETE CASCADE );

 CREATE TABLE ORDINE_SALA (
    N_ORDINE NUMBER (3,0) PRIMARY KEY,
    ID_TAVOLO NUMBER (2,0) , /*  NON E' STATO RESO OBBLIGATORIO ALTRIMENTI  ADREBBRE IN CONSTRASTO CON LA POLITICA DI CANCELLAZIONE DI UN TAVOLO, PERCHE' SAREI COMUNQUE INTERESSATO A RICORDARE L'ORDINE EFFETTUATO ANCHE SE IL TAVOLO VENISSE CANCELLATO  */
    ID_RISTORANTE VARCHAR(20) NOT NULL,
    CONSTRAINT FK9 FOREIGN KEY (N_ORDINE) REFERENCES ORDINE (N_ORDINE) ON DELETE CASCADE,
    CONSTRAINT FK10  FOREIGN KEY (ID_TAVOLO,ID_RISTORANTE) REFERENCES TAVOLO (N_TAVOLO,ID_RISTORANTE) ON DELETE SET NULL );


CREATE TABLE CONSEGNA (
    SERIALE  VARCHAR(10) PRIMARY KEY,
    ID_ORDINE NUMBER (3,0) NOT NULL UNIQUE,
    ID_JOURNEY NUMBER(3,0) NOT NULL,
    ID_STAFF NUMBER(2,0)NOT NULL,
    D_CONSEGNA DATE,
    CONSTRAINT FK13 FOREIGN KEY (ID_ORDINE) REFERENCES ORDINE_CASA(N_ORDINE) ON DELETE SET NULL,
    CONSTRAINT FK14 FOREIGN KEY (ID_JOURNEY,ID_STAFF) REFERENCES JOURNEY (ID_JOURNEY,ID_STAFF) ON DELETE SET NULL );
 

CREATE TABLE CARTA_DI_CREDITO (
    N_CARD VARCHAR(16) PRIMARY KEY,
    SCADENZA DATE NOT NULL, 
    NOME_TITOLARE VARCHAR(20) NOT NULL,
    COGNOME_TITOLARE VARCHAR (20) NOT NULL,
    ID_CLIENTE VARCHAR(11) NOT NULL,
    CCV CHAR (3) NOT NULL,
    CONSTRAINT FK15 FOREIGN KEY(ID_CLIENTE)REFERENCES CLIENTE (N_TEL) ON DELETE CASCADE );
                                                                                  
 
 CREATE TABLE CONTO (
    CODICE number(4,0) PRIMARY KEY,
    ID_ORDINE NUMBER (3,0) NOT NULL UNIQUE,
    ID_CC VARCHAR(16),
    TOTALE NUMBER (4,0),
    CONSTRAINT FK16 FOREIGN KEY (ID_ORDINE) REFERENCES ORDINE(N_ORDINE) ON DELETE CASCADE,
    CONSTRAINT FK17 FOREIGN KEY (ID_CC) REFERENCES CARTA_DI_CREDITO (N_CARD) ON DELETE SET NULL );


CREATE TABLE MENU(
    ID_MENU NUMBER (2,0) PRIMARY KEY,
    TIPO VARCHAR(20) );

CREATE TABLE SELEZIONA (
    QUANTITA NUMBER(2,0) NOT NULL,
    N_ORDINE NUMBER (3,0) NOT NULL,
    ID_MENU NUMBER (2,0) NOT NULL,
    CONSTRAINT FK18 FOREIGN KEY (N_ORDINE) REFERENCES ORDINE (N_ORDINE) ON DELETE CASCADE,
    CONSTRAINT FK19 FOREIGN KEY (ID_MENU) REFERENCES MENU (ID_MENU) ON DELETE CASCADE );

CREATE TABLE PASTO (
    NOME_PASTO VARCHAR(30) PRIMARY KEY,
    PREZZO NUMBER(2,0) NOT NULL
     );
 

CREATE TABLE CONTIENE(
   ID_MENU NUMBER(2,0) NOT NULL,
   NOME_PASTO VARCHAR(30) NOT NULL,
  CONSTRAINT FK20 FOREIGN KEY(ID_MENU) REFERENCES MENU(ID_MENU) ON DELETE CASCADE,
  CONSTRAINT FK27 FOREIGN KEY(NOME_PASTO) REFERENCES PASTO(NOME_PASTO)ON DELETE CASCADE );


CREATE TABLE INGREDIENTE (
    BARCODE VARCHAR(8) PRIMARY KEY,
    NOME_INGREDIENTE VARCHAR(30) NOT NULL );


CREATE TABLE SI_COMPONE (
    NOME_PASTO VARCHAR(30) NOT NULL,
    BARCODE VARCHAR(8) NOT NULL,
    QUANTITA VARCHAR (6),
    CONSTRAINT FK21 FOREIGN KEY(BARCODE) REFERENCES INGREDIENTE(BARCODE) ON DELETE CASCADE,
    CONSTRAINT FK22 FOREIGN KEY (NOME_PASTO)REFERENCES PASTO (NOME_PASTO)ON DELETE CASCADE );


CREATE TABLE FORNITORE (
    P_IVA_FORNITORE VARCHAR(20) PRIMARY KEY,
    NOME_FORNITORE VARCHAR(30) NOT NULL,
    TELEFONO_FORNITORE VARCHAR(11) NOT NULL,
    CITTA VARCHAR (15),
    CAP VARCHAR (6),
    VIA VARCHAR (30),
    CONSTRAINT telefonocheckfornitore CHECK( REGEXP_LIKE (TELEFONO_FORNITORE ,'^[0-9]{3}+$') ),
    CONSTRAINT CHECK_IVA_FORNITORE CHECK (REGEXP_LIKE(P_IVA_FORNITORE, '^[A-Z]{2}+[A-Z0-9]{9}' ) ) );



CREATE TABLE FORNITURA (
    N_FATTURA NUMBER (3,0) PRIMARY KEY,
    TOTALE NUMBER(4,0) NOT NULL,
    DATA_CONSEGNA DATE,
    ID_FORNITORE VARCHAR(20),
    ID_RISTORANTE VARCHAR(20) NOT NULL,
    DATA_RICHIESTA DATE,
    CONSTRAINT FK23 FOREIGN KEY (ID_FORNITORE) REFERENCES FORNITORE (P_IVA_FORNITORE) ON DELETE SET NULL,
    CONSTRAINT FK24 FOREIGN KEY(ID_RISTORANTE ) REFERENCES RISTORANTE (P_IVA) ON DELETE CASCADE );


CREATE TABLE PROVIENE_DA (
    BARCODE VARCHAR(8) NOT NULL,
    N_FATTURA NUMBER (3,0) NOT NULL,
    QUANTITA VARCHAR(6),
    CONSTRAINT FK25 FOREIGN KEY(BARCODE)REFERENCES INGREDIENTE (BARCODE)ON DELETE CASCADE,
    CONSTRAINT FK26 FOREIGN KEY (N_FATTURA) REFERENCES FORNITURA (N_FATTURA) ON DELETE CASCADE );





CREATE OR REPLACE TRIGGER check_capienza 
BEFORE INSERT OR UPDATE ON ORDINE_SALA
FOR EACH ROW
DECLARE
CAPIENZA_ERRATA EXCEPTION;
CAP NUMBER(2,0);
NUM_PERS NUMBER(2,0);
BEGIN



SELECT N_PERSONE INTO NUM_PERS FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=(SELECT ID_PRENOTAZIONE FROM ORDINE WHERE N_ORDINE=:NEW.N_ORDINE);

SELECT CAPIENZA INTO CAP FROM TAVOLO WHERE N_TAVOLO=:NEW.ID_TAVOLO AND ID_RISTORANTE=:NEW.ID_RISTORANTE;



IF  NUM_PERS > CAP THEN
RAISE CAPIENZA_ERRATA;
END IF;
EXCEPTION
WHEN CAPIENZA_ERRATA THEN
RAISE_APPLICATION_ERROR(-20010,'Il tavolo selezionato non Ã¨ abbastanza capiente');
END;
/



CREATE OR REPLACE TRIGGER CHECK_DATA_CC
    BEFORE INSERT OR UPDATE ON CARTA_DI_CREDITO
    FOR EACH ROW
    DECLARE
    SCADENZA_ERROR EXCEPTION;
    DATA_OGGI DATE;
  
  
    BEGIN
 
   SELECT SYSDATE INTO DATA_OGGI FROM DUAL;
 
   IF :NEW.SCADENZA <= DATA_OGGI then
   RAISE SCADENZA_ERROR;
   end if;
 
 

   EXCEPTION
   WHEN SCADENZA_ERROR THEN
   RAISE_APPLICATION_ERROR(-20002,'PAGAMENTO RIFIUTATO:carta di credito scaduta.');
   END;
 /  

CREATE OR REPLACE TRIGGER CHECK_DAY_OFF
BEFORE INSERT OR UPDATE ON PRENOTAZIONE                             
for each row
declare
data_errata exception;
day_of char(1) ; 


begin


SELECT DAY_OFF INTO day_of FROM RISTORANTE WHERE P_IVA=:NEW.ID_RISTORANTE;


IF to_char(:new.data_p,'D') = day_of then
raise data_errata;
end if;
exception
when data_errata then
RAISE_APPLICATION_ERROR(-20001,'Stai prenotando nel giorno di chiusura del ristorante');


end ;
/




CREATE OR REPLACE TRIGGER CHECK_FATTORINO
BEFORE INSERT OR UPDATE ON JOURNEY 
FOR EACH ROW
DECLARE
RUOLO_STAFF_ERRATO EXCEPTION;
RUOLO_S  VARCHAR2(15);
FATTORINO_TMP VARCHAR2(15);
BEGIN


FATTORINO_TMP := 'FATTORINO';
SELECT RUOLO INTO RUOLO_S FROM STAFF WHERE N_CARTELLINO=:new.id_staff;

IF TO_CHAR(RUOLO_S) != TO_CHAR(FATTORINO_TMP) THEN
RAISE RUOLO_STAFF_ERRATO;
END IF;


EXCEPTION
WHEN  RUOLO_STAFF_ERRATO THEN 
RAISE_APPLICATION_ERROR(-20008,'Ruolo staff errato ');
END;

/


CREATE OR REPLACE TRIGGER MASSIMO_16_DIP
BEFORE INSERT OR UPDATE ON LAVORA
FOR EACH ROW
DECLARE 
TROPPI_DIPENDENTI EXCEPTION;
CONTATORE NUMBER(2,0);


BEGIN
SELECT COUNT (ID_RIST) INTO CONTATORE FROM LAVORA WHERE ID_RIST=:NEW.ID_RIST;

IF CONTATORE >= 16 THEN
RAISE TROPPI_DIPENDENTI;
END IF;


EXCEPTION
WHEN TROPPI_DIPENDENTI THEN
RAISE_APPLICATION_ERROR(-20003,'Il ristorante supera il numero massimo di dipendenti consentiti.');
END;
/

CREATE OR REPLACE TRIGGER NO_SAME_DATE
BEFORE INSERT OR UPDATE ON PRENOTAZIONE
FOR EACH ROW
DECLARE
SAME_DATE EXCEPTION;

CONTATORE2 NUMBER(3,0);

BEGIN
SELECT COUNT(*) INTO CONTATORE2 FROM PRENOTAZIONE WHERE ID_CL= :NEW.ID_CL AND DATA_P=:NEW.DATA_P ;



IF CONTATORE2 > 0 THEN   
RAISE SAME_DATE; 
END IF;


EXCEPTION
WHEN SAME_DATE THEN
RAISE_APPLICATION_ERROR(-20005,'PRENOTAZIONE RIFIUTATA: HAI GIA PRENOTATO');


END;
/


CREATE  TRIGGER MAX_1_RIST
BEFORE INSERT OR UPDATE ON LAVORA
FOR EACH ROW
DECLARE
TROPPI_RISTORANTI   EXCEPTION;
CONTATORE NUMBER (3,0);


BEGIN

SELECT COUNT(ID_STAFF) INTO CONTATORE FROM LAVORA WHERE ID_STAFF=:NEW.ID_STAFF;

IF CONTATORE >= 1 THEN 
RAISE TROPPI_RISTORANTI;
END IF; 
EXCEPTION
WHEN TROPPI_RISTORANTI THEN
RAISE_APPLICATION_ERROR(-20004,'Il dipendente lavora gia per un ristorante');
END;
/


CREATE OR REPLACE TRIGGER CHECK_RIST_TAV
    BEFORE INSERT OR UPDATE ON ORDINE_SALA
    FOR EACH ROW
    DECLARE
    RISTORANTE_TAVOLO EXCEPTION;
  
    RISTO_PREN VARCHAR2(20);
    BEGIN
  
  SELECT ID_RISTORANTE INTO RISTO_PREN FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=(SELECT ID_PRENOTAZIONE FROM ORDINE WHERE N_ORDINE=:NEW.N_ORDINE);
 

 
   IF TO_CHAR(RISTO_PREN) != TO_CHAR(:NEW.ID_RISTORANTE) THEN
   RAISE RISTORANTE_TAVOLO;
   END IF;
 
   EXCEPTION
   WHEN RISTORANTE_TAVOLO THEN
   RAISE_APPLICATION_ERROR(-20011,'Il tavolo selezionato non appartiene al ristorante prenotato.');
   END;
   /


--NON POSSO PRENOTARSI CON + DI 2 SETTIMANE DI ANTICIPO 
CREATE OR REPLACE TRIGGER CHECK_ANTICIPO
BEFORE INSERT OR UPDATE ON PRENOTAZIONE	
FOR EACH ROW
DECLARE
TROPPO_PRESTO EXCEPTION;
ANTICIPO NUMBER (3,0);

BEGIN
select  TRUNC(:NEW.DATA_P) - TRUNC (:NEW.DATA_CHIAMATA) INTO ANTICIPO FROM DUAL;

IF (ANTICIPO > 14 ) THEN
RAISE TROPPO_PRESTO;
END IF;


EXCEPTION
WHEN TROPPO_PRESTO THEN
RAISE_APPLICATION_ERROR(-20060,'Impossibile prenotare con piu di 14 giorni di anticipo.');



END;
/


CREATE OR REPLACE PROCEDURE SELEZIONA_MENU( PK CLIENTE.N_TEL%TYPE,ID_MENU NUMBER , QUANTITA NUMBER )
IS
ERRORE_1 EXCEPTION;
ID_PREN PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
ID_ORDINE  ORDINE.N_ORDINE%TYPE;
CONTATORE NUMBER (3,0);
BEGIN
 SELECT COUNT(N_ORDINE) INTO CONTATORE FROM ORDINE JOIN PRENOTAZIONE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE ID_CL=PK;

IF (CONTATORE = 0 ) THEN
RAISE ERRORE_1;

ELSE
SELECT  MAX(N_ORDINE) INTO ID_ORDINE FROM ORDINE JOIN PRENOTAZIONE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE ID_CL=PK;
INSERT INTO SELEZIONA VALUES (QUANTITA,ID_ORDINE,ID_MENU);
COMMIT;
DBMS_OUTPUT.PUT_LINE('OPERAZIONE ESEGUITA CON SUCCESSO');
END IF;



EXCEPTION
WHEN ERRORE_1 THEN
RAISE_APPLICATION_ERROR(-20020,'L utente selezionato non risulta essere prenotato');



END;
/

CREATE OR REPLACE PROCEDURE PREN(PK CLIENTE.N_TEL%TYPE, N_PERS PRENOTAZIONE.N_PERSONE%TYPE, DATA_PRENOTAZIONE DATE,ID_RIST PRENOTAZIONE.ID_RISTORANTE%TYPE, FLAG NUMBER)
IS
CONTATORE NUMBER(2,0);
CONTATORE2 NUMBER(2,0);
ID_PR      PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
DATA_CHIAM DATE;
FLAG_ERRATO EXCEPTION;
NUOVO_ORDINE ORDINE.N_ORDINE%TYPE;
RIST_ERRATO EXCEPTION;

BEGIN
-- CONTROLLO SE L'UTENTE EFFETTIVAMENTE ESISTE 
SELECT COUNT(N_TEL) INTO CONTATORE FROM CLIENTE WHERE N_TEL=PK; 
IF (CONTATORE=0) THEN
RAISE NO_DATA_FOUND;
END IF;

--CONTROLLO SE LA PARTITA IVA ESISTE

SELECT COUNT(P_IVA) INTO CONTATORE2 FROM RISTORANTE WHERE P_IVA=ID_RIST; 
IF (CONTATORE2=0) THEN
RAISE RIST_ERRATO;
END IF;



SELECT SYSDATE INTO DATA_CHIAM FROM DUAL;
--GENERO UN NUOVO ID_PRENOTAZIONE;
SELECT  MAX(ID_PRENOTAZIONE+1) INTO ID_PR FROM PRENOTAZIONE;

INSERT INTO PRENOTAZIONE VALUES(ID_PR,N_PERS,PK,DATA_CHIAM,ID_RIST,DATA_PRENOTAZIONE);

-- CONTROLLO PER VERIFCARE CHE IL VALORE DEL FLAG SIA AMMESSO, PER DETERMINARE
--SE L'UTENTE STA EFFETTUANDO UNA PRENOTAZIONE PER CASA O IN SALA
IF (FLAG > 1 AND FLAG < 0) THEN
RAISE FLAG_ERRATO;
ELSIF (FLAG=1) THEN 
COMMIT;
DBMS_OUTPUT.PUT_LINE('PRENOTAZIONE EFFETTUATA CON SUCCESSO CON ID:' || ID_PR ); 
DBMS_OUTPUT.PUT_LINE('LA ASPETTIAMO IL GIORNO ' || TO_CHAR(DATA_PRENOTAZIONE, 'DD-MON-YYYY HH24:MI ') );
ELSE

SELECT MAX(N_ORDINE+1) INTO NUOVO_ORDINE FROM ORDINE; 

INSERT INTO ORDINE VALUES (NUOVO_ORDINE,ID_PR);
INSERT INTO ORDINE_CASA VALUES (NUOVO_ORDINE);
COMMIT;
DBMS_OUTPUT.PUT_LINE('PRENOTAZIONE EFFETTUATA CON SUCCESSO, RICHIAMARE LA PROCEDURA SELEZIONA_MENU');
END IF;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20021,'L utente non risulta essere registrato. Eseguire la registrazione');

WHEN FLAG_ERRATO THEN
RAISE_APPLICATION_ERROR(-20022,'FLAG AMMESI : 1 PER PRONOTARE IN SALA, 0 PER PRENOTARE D ASPORTO ');

WHEN RIST_ERRATO THEN
RAISE_APPLICATION_ERROR(-20023,'Il ristorante selezionato non esiste ');

END;
/



CREATE OR REPLACE PROCEDURE DISDETTA(PK CLIENTE.N_TEL%TYPE, DATA_PREN DATE) 
IS
ORDINE_DA_CASA EXCEPTION;
CONTATORE NUMBER(2,0);
ID_ORDINE NUMBER(2,0);
ID_PR PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
BEGIN

SELECT ID_PRENOTAZIONE INTO ID_PR FROM PRENOTAZIONE WHERE ID_CL=PK AND TRUNC(DATA_P)=TRUNC(DATA_PREN);



SELECT COUNT(ORDINE_CASA.N_ORDINE) INTO CONTATORE FROM ORDINE_CASA JOIN ORDINE ON ORDINE_CASA.N_ORDINE=ORDINE.N_ORDINE WHERE ORDINE.ID_PRENOTAZIONE=ID_PR;

IF (CONTATORE > 0) THEN
RAISE ORDINE_DA_CASA;
ELSE

DELETE FROM PRENOTAZIONE WHERE ID_CL=PK AND ID_PRENOTAZIONE=ID_PR;
COMMIT;
DBMS_OUTPUT.PUT_LINE('DISDETTA EFFETTUATA CON SUCCESSO ');

END IF;


EXCEPTION
WHEN ORDINE_DA_CASA THEN
RAISE_APPLICATION_ERROR(-20025,'Impossibile disdire questo tipo di ordine.');


WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20026,'Impossibile disdire questo ordine. Prenotazione inesistente');
END;
/




CREATE OR REPLACE PROCEDURE ASSEGNA_TAVOLO(PK CLIENTE.N_TEL%TYPE, ID_PR PRENOTAZIONE.ID_PRENOTAZIONE%TYPE)
IS
TROPPO_TARDI EXCEPTION;
TROPPO_PRESTO EXCEPTION;
CONTATORE NUMBER(2,0);
DATA_PRESENZA DATE;
DIFFERENZA NUMBER(6,0);
numero_persone number(2,0);
NUMERO_TAVOLO NUMBER (2,0);
N_ORDINE_NUOVO ORDINE.N_ORDINE%TYPE;
CAPIENZA_TAVOLO TAVOLO.CAPIENZA%TYPE;
DATA_PREN DATE;
RIST RISTORANTE.P_IVA%TYPE;
CHECK_PR PRENOTAZIONE.ID_PRENOTAZIONE%TYPE;
VARIABILE NUMBER(3,0);
BEGIN
--CI SERVE SOLO PER VEDERE SE LA QUERY RITORNA UN  NO_DATA_FOUND O MENO
SELECT ID_PRENOTAZIONE INTO CHECK_PR FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR ;

SELECT DATA_P INTO DATA_PREN FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;
--Orario in cui arriva il cliente 
SELECT SYSDATE INTO DATA_PRESENZA FROM DUAL;


--CONTROLLO SE ARRIVA IN RITARDO 
SELECT  24*60* (DATA_PREN-DATA_PRESENZA) INTO DIFFERENZA from dual;
IF (DIFFERENZA < 30  ) THEN
DELETE FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;
COMMIT;
RAISE TROPPO_TARDI;
ELSIF (DIFFERENZA > 30 ) THEN
RAISE TROPPO_PRESTO;

ELSE




--Assegnazione del tavolo
--TROVO IL NUMERO DI PERSONE
SELECT N_PERSONE INTO NUMERO_PERSONE FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;


--TROVO UN TAVOLO CON UNA CAPIENZA SUPERIORI AL NUMERO DI PERSONE.
SELECT MIN(CAPIENZA)  INTO CAPIENZA_TAVOLO FROM TAVOLO WHERE CAPIENZA >=NUMERO_PERSONE AND ID_RISTORANTE=(SELECT ID_RISTORANTE  FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR);


--PER RIPRENDERE L'ID RISTORANTE
SELECT ID_RISTORANTE INTO RIST FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=ID_PR;



SELECT MIN(N_TAVOLO) INTO NUMERO_TAVOLO FROM TAVOLO WHERE CAPIENZA=CAPIENZA_TAVOLO;

SELECT COUNT(N_ORDINE) INTO VARIABILE FROM ORDINE;
IF ( VARIABILE > 0) THEN
SELECT MAX(N_ORDINE+1) INTO N_ORDINE_NUOVO FROM ORDINE;
ELSE
N_ORDINE_NUOVO:=1;
END IF;


INSERT INTO ORDINE VALUES(N_ORDINE_NUOVO,ID_PR);
INSERT INTO ORDINE_SALA VALUES(N_ORDINE_NUOVO,NUMERO_TAVOLO,RIST);
COMMIT;
DBMS_OUTPUT.PUT_LINE('TAVOLO ASSEGNATO CON SUCCESSO');

END IF;
EXCEPTION
WHEN  NO_DATA_FOUND THEN 
RAISE_APPLICATION_ERROR(-20027,'La prenotazione non esiste');
WHEN TROPPO_TARDI THEN
RAISE_APPLICATION_ERROR(-20028,'Prenotazione disdetta: utente arrivato troppo tardi');
WHEN TROPPO_PRESTO THEN
RAISE_APPLICATION_ERROR(-20029,' utente arrivato troppo presto');
END;
/


CREATE OR REPLACE PROCEDURE GET_CONTO(N_ORD ORDINE.N_ORDINE%TYPE)
IS
CONTO_INESISTENTE EXCEPTION;
ID_CLI VARCHAR2(11);
CONTROLLO_ERRORE NUMBER(2,0);
QUANTITA_SELEZIONA NUMBER (3,0);
I NUMBER (1,0);
CONTATORE NUMBER(3,0);
PREZZO_PARZIALE number (4,0);
PREZZO_TOTALE number (4,0);
PK_CONTO VARCHAR2(8);
CONTA NUMBER(3,0);
CONTA2 NUMBER(3,0);
CC  VARCHAR2(16);
BEGIN

SELECT COUNT(N_ORDINE) INTO CONTROLLO_ERRORE FROM ORDINE WHERE N_ORDINE=N_ORD;

IF (CONTROLLO_ERRORE = 0 )THEN
RAISE CONTO_INESISTENTE;
END IF;

PREZZO_TOTALE:=0;
FOR I IN 1..5
LOOP
SELECT COUNT(ID_MENU) INTO CONTATORE FROM SELEZIONA WHERE N_ORDINE=N_ORD AND ID_MENU=I;






IF (CONTATORE > 0) THEN
--PRENDO LA QUANTITA DELL I-ESIMO MENU SELEZIONATO
SELECT QUANTITA INTO QUANTITA_SELEZIONA FROM SELEZIONA WHERE N_ORDINE=N_ORD AND ID_MENU=I;
--QUERY PER CALCOLARE IL PREZZO DEL MENU I 
--SI PRENDE TUTTI I PREZZI DEI PASTI CHE COMPONGONO  L 'I-ESIMO MENU E LI SOMMA
select sum(prezzo) into PREZZO_PARZIALE from contiene join pasto on pasto.nome_pasto=contiene.nome_pasto where id_menu=I;

PREZZO_TOTALE:=PREZZO_TOTALE+(PREZZO_PARZIALE*QUANTITA_SELEZIONA);


END IF;
END LOOP;

DBMS_OUTPUT.PUT_LINE('Totale conto selezionato = ' || PREZZO_TOTALE);

--VEDO SE DEVO CREARE A MANO IL CODICE DI PARTENZA 
SELECT COUNT(CODICE) INTO CONTA FROM CONTO;

IF (CONTA = 0) THEN
PK_CONTO:='0001';
ELSE
SELECT MAX(CODICE)+1 INTO PK_CONTO FROM CONTO;
END IF;

-- CONTROLLIAMO SE DOBBIAMO FARE UN UPDATE(NEL CASO IN CUI CI FOSSE UN ERRORE UMANO NELL'INSERIMENTO) O UN INSERT
SELECT COUNT(ID_ORDINE) INTO CONTA2 FROM CONTO WHERE ID_ORDINE=N_ORD;


--E' UN UPDATE
IF (CONTA2 >0 ) THEN
UPDATE CONTO SET TOTALE=PREZZO_TOTALE WHERE ID_ORDINE=N_ORD;
COMMIT;
DBMS_OUTPUT.PUT_LINE('UPDATE EFFETTUATO CON SUCCESSO');
ELSE

-- RISALGO A PARTIRE DA N_ORDINE ALLA PK DEL MIO CLIENTE PER TROVARE UNA CARTA DI CREDITO PER PAGARE IL CONTO
SELECT ID_CL  INTO ID_CLI FROM PRENOTAZIONE JOIN ORDINE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE N_ORDINE=N_ORD;


--PRENDO UNA CC CORRETTA 
select n_card  INTO CC from carta_di_credito where id_cliente=ID_CLI AND ROWNUM=1;

INSERT INTO CONTO VALUES (PK_CONTO,N_ORD,CC,PREZZO_TOTALE);
COMMIT;
END IF;

DBMS_OUTPUT.PUT_LINE('Pagamento andato a buon fine');
EXCEPTION
WHEN CONTO_INESISTENTE THEN
RAISE_APPLICATION_ERROR(-20030,'L ordine non esiste.');
END;
/




CREATE OR REPLACE PROCEDURE GET_FATTURATO(RIST RISTORANTE.P_IVA%TYPE)
IS
FATTURATO NUMBER(6,0);




BEGIN


SELECT SUM(TOTALE) into FATTURATO FROM CONTO JOIN (SELECT * FROM PRENOTAZIONE JOIN ORDINE ON PRENOTAZIONE.ID_PRENOTAZIONE=ORDINE.ID_PRENOTAZIONE WHERE ID_RISTORANTE=RIST) ON N_ORDINE=ID_ORDINE;

DBMS_OUTPUT.PUT_LINE('Fatturato= '|| FATTURATO || ' EURO');
COMMIT;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RAISE_APPLICATION_ERROR(-20050,' RISTORANTE INESISTENTE');

END;
/

create or replace view info_per_consegna as
select ristorante.citta,cliente.N_TEL,cliente.cap,cliente.via,ordine_casa.n_ordine,prenotazione.data_p as data_da_consegnare from ((cliente join prenotazione on cliente.N_TEL=prenotazione.ID_CL) join ordine on ordine.ID_PRENOTAZIONE=prenotazione.ID_PRENOTAZIONE) join ordine_casa on ordine.n_ordine=ordine_casa.n_ordine join ristorante on ristorante.p_iva=prenotazione.id_ristorante order by prenotazione.id_ristorante;



CREATE OR REPLACE VIEW INFO_PREN AS
select RISTORANTE.CITTA,PRENOTAZIONE.ID_RISTORANTE,COUNT(PRENOTAZIONE.id_prenotazione) AS TOT_PREN from prenotazione JOIN RISTORANTE ON RISTORANTE.P_IVA=PRENOTAZIONE.ID_RISTORANTE where PRENOTAZIONE.DATA_P BETWEEN '22-MAG-20' AND (SELECT SYSDATE FROM DUAL) GROUP BY PRENOTAZIONE.ID_RISTORANTE,RISTORANTE.CITTA;


commit;