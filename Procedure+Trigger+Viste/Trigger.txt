CREATE OR REPLACE TRIGGER check_capienza 
BEFORE INSERT OR UPDATE ON ORDINE_SALA
FOR EACH ROW
DECLARE
CAPIENZA_ERRATA EXCEPTION;
CAP NUMBER(2,0);
NUM_PERS NUMBER(2,0);
BEGIN



SELECT N_PERSONE INTO NUM_PERS FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=(SELECT ID_PRENOTAZIONE FROM ORDINE WHERE N_ORDINE=:NEW.N_ORDINE);

SELECT CAPIENZA INTO CAP FROM TAVOLO WHERE N_TAVOLO=:NEW.ID_TAVOLO AND ID_RISTORANTE=:NEW.ID_RISTORANTE;



IF  NUM_PERS > CAP THEN
RAISE CAPIENZA_ERRATA;
END IF;
EXCEPTION
WHEN CAPIENZA_ERRATA THEN
RAISE_APPLICATION_ERROR(-20010,'Il tavolo selezionato non Ã¨ abbastanza capiente');
END;
/



CREATE OR REPLACE TRIGGER CHECK_DATA_CC
    BEFORE INSERT OR UPDATE ON CARTA_DI_CREDITO
    FOR EACH ROW
    DECLARE
    SCADENZA_ERROR EXCEPTION;
    DATA_OGGI DATE;
  
  
    BEGIN
 
   SELECT SYSDATE INTO DATA_OGGI FROM DUAL;
 
   IF :NEW.SCADENZA <= DATA_OGGI then
   RAISE SCADENZA_ERROR;
   end if;
 
 

   EXCEPTION
   WHEN SCADENZA_ERROR THEN
   RAISE_APPLICATION_ERROR(-20002,'PAGAMENTO RIFIUTATO:carta di credito scaduta.');
   END;
   /

CREATE OR REPLACE TRIGGER CHECK_DAY_OFF
BEFORE INSERT OR UPDATE ON PRENOTAZIONE                             
for each row
declare
data_errata exception;
day_of char(1) ; 


begin


SELECT DAY_OFF INTO day_of FROM RISTORANTE WHERE P_IVA=:NEW.ID_RISTORANTE;


IF to_char(:new.data_p,'D') = day_of then
raise data_errata;
end if;
exception
when data_errata then
RAISE_APPLICATION_ERROR(-20001,'Stai prenotando nel giorno di chiusura del ristorante');


end ;
/




CREATE OR REPLACE TRIGGER CHECK_FATTORINO
BEFORE INSERT OR UPDATE ON JOURNEY 
FOR EACH ROW
DECLARE
RUOLO_STAFF_ERRATO EXCEPTION;
RUOLO_S  VARCHAR2(15);
FATTORINO_TMP VARCHAR2(15);
BEGIN


FATTORINO_TMP := 'FATTORINO';
SELECT RUOLO INTO RUOLO_S FROM STAFF WHERE N_CARTELLINO=:new.id_staff;

IF TO_CHAR(RUOLO_S) != TO_CHAR(FATTORINO_TMP) THEN
RAISE RUOLO_STAFF_ERRATO;
END IF;


EXCEPTION
WHEN  RUOLO_STAFF_ERRATO THEN 
RAISE_APPLICATION_ERROR(-20008,'Ruolo staff errato ');
END;
/



CREATE OR REPLACE TRIGGER MASSIMO_16_DIP
BEFORE INSERT OR UPDATE ON LAVORA
FOR EACH ROW
DECLARE 
TROPPI_DIPENDENTI EXCEPTION;
CONTATORE NUMBER(2,0);


BEGIN
SELECT COUNT (ID_RIST) INTO CONTATORE FROM LAVORA WHERE ID_RIST=:NEW.ID_RIST;

IF CONTATORE >= 16 THEN
RAISE TROPPI_DIPENDENTI;
END IF;


EXCEPTION
WHEN TROPPI_DIPENDENTI THEN
RAISE_APPLICATION_ERROR(-20003,'Il ristorante supera il numero massimo di dipendenti consentiti.');
END;
/


CREATE OR REPLACE TRIGGER NO_SAME_DATE
BEFORE INSERT OR UPDATE ON PRENOTAZIONE
FOR EACH ROW
DECLARE
SAME_DATE EXCEPTION;

CONTATORE2 NUMBER(3,0);

BEGIN
SELECT COUNT(*) INTO CONTATORE2 FROM PRENOTAZIONE WHERE ID_CL= :NEW.ID_CL AND DATA_P=:NEW.DATA_P ;



IF CONTATORE2 > 0 THEN   
RAISE SAME_DATE; 
END IF;


EXCEPTION
WHEN SAME_DATE THEN
RAISE_APPLICATION_ERROR(-20005,'PRENOTAZIONE RIFIUTATA: HAI GIA PRENOTATO');


END;
/


CREATE  TRIGGER MAX_1_RIST
BEFORE INSERT OR UPDATE ON LAVORA
FOR EACH ROW
DECLARE
TROPPI_RISTORANTI   EXCEPTION;
CONTATORE NUMBER (3,0);


BEGIN

SELECT COUNT(ID_STAFF) INTO CONTATORE FROM LAVORA WHERE ID_STAFF=:NEW.ID_STAFF;

IF CONTATORE >= 1 THEN 
RAISE TROPPI_RISTORANTI;
END IF; 
EXCEPTION
WHEN TROPPI_RISTORANTI THEN
RAISE_APPLICATION_ERROR(-20004,'Il dipendente lavora gia per un ristorante');
END;
/



CREATE OR REPLACE TRIGGER CHECK_RIST_TAV
    BEFORE INSERT OR UPDATE ON ORDINE_SALA
    FOR EACH ROW
    DECLARE
    RISTORANTE_TAVOLO EXCEPTION;
  
    RISTO_PREN VARCHAR2(20);
    BEGIN
  
  SELECT ID_RISTORANTE INTO RISTO_PREN FROM PRENOTAZIONE WHERE ID_PRENOTAZIONE=(SELECT ID_PRENOTAZIONE FROM ORDINE WHERE N_ORDINE=:NEW.N_ORDINE);
 

 
   IF TO_CHAR(RISTO_PREN) != TO_CHAR(:NEW.ID_RISTORANTE) THEN
   RAISE RISTORANTE_TAVOLO;
   END IF;
 
   EXCEPTION
   WHEN RISTORANTE_TAVOLO THEN
   RAISE_APPLICATION_ERROR(-20011,'Il tavolo selezionato non appartiene al ristorante prenotato.');
   END;
   /


--NON POSSO PRENOTARSI CON + DI 2 SETTIMANE DI ANTICIPO 
CREATE OR REPLACE TRIGGER CHECK_ANTICIPO
BEFORE INSERT OR UPDATE ON PRENOTAZIONE	
FOR EACH ROW
DECLARE
TROPPO_PRESTO EXCEPTION;
ANTICIPO NUMBER (3,0);

BEGIN
select  TRUNC(:NEW.DATA_P) - TRUNC (:NEW.DATA_CHIAMATA) INTO ANTICIPO FROM DUAL;

IF (ANTICIPO > 14 ) THEN
RAISE TROPPO_PRESTO;
END IF;


EXCEPTION
WHEN TROPPO_PRESTO THEN
RAISE_APPLICATION_ERROR(-20060,'Impossibile prenotare con piu di 14 giorni di anticipo.');



END;
/

